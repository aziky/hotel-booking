services:
  postgres:
    image: "postgres:latest"
    container_name: postgres
    environment:
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nlshotelbooking -d hotel-booking"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - be-network

  redis:
    image: "redis:7"
    container_name: redis
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - be-network

  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_PORT_MANAGEMENT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - be-network

  eureka-server:
    build:
      context: .
      dockerfile: ./eureka-server/Dockerfile
    image: eureka-server-image
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - be-network


  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    image: user-service-image
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - be-network

  booking-service:
    build:
      context: .
      dockerfile: ./booking-service/Dockerfile
    image: booking-service-image
    container_name: booking-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - be-network

  payment-service:
    build:
      context: .
      dockerfile: ./payment-service/Dockerfile
    image: payment-service-image
    container_name: payment-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - be-network

  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    image: notification-service-image
    container_name: notification-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - be-network

  recommendation-service:
    build:
      context: .
      dockerfile: ./recommendation-service/Dockerfile
    image: recommendation-service-image
    container_name: recommendation-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - be-network

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    image: api-gateway-image
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      user-service:
        condition: service_started
      booking-service:
        condition: service_started
      payment-service:
        condition: service_started
      notification-service:
        condition: service_started
      recommendation-service:
        condition: service_started
    networks:
      - be-network

volumes:
  rabbitmq_data:
  postgres_data:
    driver: local

networks:
  be-network:
    external: true
